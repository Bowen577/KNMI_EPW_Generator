name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.10"

jobs:
  # Validate release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test,docs]"
    
    - name: Run full test suite
      run: |
        mkdir -p data/knmi data/knmi_zip data/stations data/templates output/epw logs
        pytest tests/ -v --tb=short
    
    - name: Run code quality checks
      run: |
        black --check src/ tests/ examples/
        isort --check-only src/ tests/ examples/
        flake8 src/ tests/ examples/
        mypy src/knmi_epw/
    
    - name: Build documentation
      run: |
        cd docs
        make html
    
    - name: Validate version consistency
      run: |
        # Extract version from tag
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Tag version: $TAG_VERSION"
        
        # Extract version from package
        PACKAGE_VERSION=$(python -c "from src.knmi_epw import __version__; print(__version__)")
        echo "Package version: $PACKAGE_VERSION"
        
        # Compare versions
        if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "Version mismatch: tag=$TAG_VERSION, package=$PACKAGE_VERSION"
          exit 1
        fi

  # Build and test package
  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import knmi_epw; print(f'Successfully imported knmi_epw v{knmi_epw.__version__}')"
        knmi-epw --help
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-dist
        path: dist/

  # Test package on multiple platforms
  test-package:
    name: Test Package (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: build-package
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-dist
        path: dist/
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl
    
    - name: Test basic functionality
      run: |
        python -c "import knmi_epw; print(f'KNMI EPW Generator v{knmi_epw.__version__} installed successfully')"
        knmi-epw --version
        knmi-epw --help
        knmi-epw stations --help

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, test-package]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: release
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  # Publish to Test PyPI (for pre-releases)
  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, test-package]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && contains(github.ref, 'rc')
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-dist
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        verbose: true

  # Create GitHub release assets
  create-release-assets:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: [validate-release, build-package]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
    
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-dist
        path: dist/
    
    - name: Build documentation
      run: |
        cd docs
        make html
        cd _build
        tar -czf ../../docs-html.tar.gz html/
    
    - name: Generate changelog
      run: |
        # Extract changelog for this version
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "# Release Notes for v$TAG_VERSION" > release-notes.md
        echo "" >> release-notes.md
        
        # Add installation instructions
        echo "## Installation" >> release-notes.md
        echo "" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "pip install knmi-epw-generator==$TAG_VERSION" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        
        # Add basic usage
        echo "## Quick Start" >> release-notes.md
        echo "" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "# Generate EPW files for all stations for 2023" >> release-notes.md
        echo "knmi-epw generate --year 2023" >> release-notes.md
        echo "" >> release-notes.md
        echo "# List available stations" >> release-notes.md
        echo "knmi-epw stations --list" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
          docs-html.tar.gz
          release-notes.md
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    if: github.event_name == 'release' && github.event.action == 'published' && !contains(github.ref, 'rc')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"
    
    - name: Build documentation
      run: |
        cd docs
        make html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        cname: knmi-epw-generator.readthedocs.io

  # Notify on success
  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [publish-pypi, create-release-assets]
    if: success()
    
    steps:
    - name: Extract version
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "RELEASE_VERSION=$TAG_VERSION" >> $GITHUB_ENV
    
    - name: Create success summary
      run: |
        echo "## ðŸŽ‰ Release v${{ env.RELEASE_VERSION }} Published Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Package Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: v${{ env.RELEASE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PyPI**: https://pypi.org/project/knmi-epw-generator/${{ env.RELEASE_VERSION }}/" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Release**: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ env.RELEASE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸš€ Installation" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "pip install knmi-epw-generator==${{ env.RELEASE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
